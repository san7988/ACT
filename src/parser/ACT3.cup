package parser;
import java_cup.runtime.*;
import stateChartToGraph.Expression;
import stateChartToGraph.Action;
import graph.BinaryOperation;
import graph.Operation;
import graph.Guard;
import graph.Collection;
import graph.State;
import graph.INode;
import graph.IEdge;
import graph.StateChart;
import graph.Transition;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
:}

terminal LBRACE,RBRACE,COLON,COMMA,EQUAL,SYSTEM,STATE,DESC,INPUT,CLICKABLE,TRANSITION,SOURCE,DEST,TRIGGER,GUARD,ACTI,DOT;
terminal String ID;
terminal Integer NUMBER;

non terminal states,transitions,acti,idList,inputsAll,clickableAll;
non terminal BinaryOperation exp;
non terminal Guard guard;
non terminal State source;
non terminal State dest;
non terminal State state;
non terminal StateChart system;
non terminal Transition transition;
non terminal String trigger;

system ::= SYSTEM COLON ID LBRACE states transitions RBRACE  {: 
				 StateChart sc=new StateChart(Collection.getStateList(),Collection.getTransitionList());
				 System.out.println("Parser: Statechart successfully created."); 
				 System.out.println("Here statechart says:\n\tNumber of States = "+sc.getNumberOfNodes()+"\n\tNo of Transitions = "+sc.getNumberOfEdges());
				 System.out.println("States are as follows:");
				 for(INode inode : sc.getStateSet()){
					System.out.print(State.class.cast(inode).getName()+",");
				 }
				 System.out.println("\n\nTransitions are as follows:");	 													 
				 for(IEdge iedge : sc.getTransitionSet()){
					System.out.println(Transition.class.cast(iedge).getName());
				 } 
				 :};

states ::= states state:sta {:
									 Collection.addState(sta);
									 System.out.println("Parser: State "+sta.getName()+" added to Collection"); 
									 :}
									  | ;
state ::= STATE COLON ID:id1 LBRACE DESC COLON ID:id2 inputsAll clickableAll RBRACE {: 
								//System.out.println("Parser: Values of state"+ Collection.getInputList()+" "+Collection.getClickableList());
								RESULT=new State(id1,id2,Collection.getInputList(),Collection.getClickableList());
								System.out.println("Parser: State "+id1+" Identified"); 
								:} ;
inputsAll ::= INPUT COLON idList {:
									Collection.addInputListFromIdList();
									System.out.println("Parser: InputList Identified");
								:};
clickableAll ::= CLICKABLE COLON idList {:
									Collection.addClickableListFromIdList();
									System.out.println("Parser: ClickableList Identified");
								:};
idList ::= idList COMMA ID:id1 {:
									Collection.addId(id1);
									System.out.println("Parser: Id "+id1+" identified in a State and added");
										:}
								| ID:id2 {:
									Collection.addId(id2);
									System.out.println("Parser: Id "+id2+" identified in a State and added");
									:};

transitions ::= transitions transition:trans {:
									 Collection.addTransition(trans);
									 System.out.println("Parser: Transition "+trans.getName()+" added to Collection"); 
									 :}
									  | ;

transition ::= TRANSITION COLON ID:id LBRACE source:src dest:des trigger:trig guard:grd acti:act RBRACE {: 	
																		Transition transition=new Transition(id,null,src,des,trig,null,null);
																		RESULT = transition;
																		System.out.println("Parser: Transition "+transition.getName()+" Identified"); 
									 :};

source ::= SOURCE COLON ID:id {: 
					RESULT=Collection.getStateByName(id);
					System.out.println("Parser: Source of a Transition Identified as "+id); 
					:} ;

dest ::= DEST COLON ID:id {: 
					RESULT=Collection.getStateByName(id);
					System.out.println("Parser: Destination of a Transition Identified as "+id); 
					:} ;

trigger ::= TRIGGER COLON ID:id {: 
					RESULT=id;
					System.out.println("Parser: Trigger of a Transition Identified as "+id); 
					:} ;

guard ::= GUARD COLON exp:expr {: 
						Guard g1=new Guard(Collection.getOperationList());
						System.out.println(g1);
						System.out.println("Parser: Guard of a transition Identified"); 
						:} ;

acti ::= ACTI COLON exp:expr {: 
						System.out.println("Parser: Action of a transition Identified"); 
						:} ;

exp ::= ID:id1 EQUAL ID:id2 {: 
						Operation bin1=new BinaryOperation(id1,"=",id2);
						Collection.addOperation(bin1);
						System.out.println(bin1.toString());
						System.out.println("Parser: Expression added to Collection"); 
						:} ;


