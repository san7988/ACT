package parser;
import java_cup.runtime.*;
import stateChartToGraph.Expression;
import stateChartToGraph.Action;
import graph.BinaryOperation;
import graph.Operation;
import graph.Guard;
import graph.Collection;
import graph.State;
import graph.INode;
import graph.IEdge;
import graph.StateChart;
import graph.Transition;

parser code {:
	public static void main(String args[]) throws Exception {
		new parser(new Yylex(System.in)).parse();
	}
:}

terminal LBRACE,RBRACE,COLON,EQUAL,SYSTEM,STATE,TRANSITION,SOURCE,DEST,GUARD,ACTI;
terminal String ID;
terminal Integer NUMBER;

non terminal states,transitions,acti;
non terminal BinaryOperation exp;
non terminal Guard guard;
non terminal State source;
non terminal State dest;
non terminal State state;
non terminal StateChart system;
non terminal Transition transition;

system ::= SYSTEM COLON ID LBRACE states:s1 transitions RBRACE {: 
														 StateChart sc=new StateChart(Collection.getStateList(),Collection.getTransitionList());
														 System.out.println("Yoooo"); 
														 System.out.println("Here statechart says:\n\tNumber of States = "+sc.getNumberOfNodes()+"\n\tNo of Transitions = "+sc.getNumberOfEdges());
														 System.out.println("States are as follows:");
														 for(INode inode : sc.getStateSet()){
	 														System.out.print(State.class.cast(inode).getName()+",");
	 													 }
														 System.out.println("\n\nTransitions are as follows:");	 													 
														 for(IEdge iedge : sc.getTransitionSet()){
	 														System.out.println(Transition.class.cast(iedge).getName());
	 													 } 
														 :};

states ::= states state:sta {: 
					Collection.addState(sta);
					System.out.println("Yo"); 
					:}
					| ;

state ::= STATE COLON ID:id LBRACE RBRACE {: 
								RESULT=new State(id,null,null,null);
								System.out.println("state in parser"); 
								:} ;

transitions ::= transitions transition:trans {:
									 Collection.addTransition(trans);
									 System.out.println("Yo"); 
									 :}
									  | ;

transition ::= TRANSITION COLON ID:id LBRACE source:src dest:des guard:grd acti:act RBRACE {: 	
																		System.out.println("trans in parser with vals: "+id+" "+src+" "+des);
																		Transition transition=new Transition(id,null,src,des,null,null,null);
																		RESULT = transition;
																		System.out.println("Transition executed; It's name is: "+transition.getName());																		 
																		:} ;

source ::= SOURCE COLON ID:id {: 
					RESULT=Collection.getStateByName(id);
					System.out.println("src in parser"); 
					:} ;

dest ::= DEST COLON ID:id {: 
					RESULT=Collection.getStateByName(id);
					System.out.println("dest in parser"); 
					:} ;

guard ::= GUARD COLON exp:expr {: 
						Guard g1=new Guard(Collection.getOperationList());
						System.out.println(g1);
						System.out.println("guard in parser"); 
						:} ;

acti ::= ACTI COLON exp:expr {: 
						System.out.println("action in parser"); 
						:} ;

exp ::= ID:id1 EQUAL ID:id2 {: 
						Operation bin1=new BinaryOperation(id1,"=",id2);
						Collection.addOperation(bin1);
						System.out.println(bin1.toString());
						System.out.println("exp in parser"); 
						:} ;


